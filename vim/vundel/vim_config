"""""""""""""""""""""""""""""""""
" => 全局配置
"""""""""""""""""""""""""""""""""
" 关闭兼容模式
set nocompatible
" 设置历史记录步数
set history=100
" 开启相关插件
filetype on
filetype plugin on
filetype indent on
" 当文件在外部被修改时，自动更新该文件
set autoread
" 激活鼠标的使用
set mouse-=a
"""""""""""""""""""""""""""""""""
" => 字体和颜色
"""""""""""""""""""""""""""""""""
" 开启语法
syntax enable
" 设置字体
set guifont=dejaVu\ Sans\ MONO\ 10
" 设置配色
colorscheme desert
" 高亮显示当前行
set cursorline
hi cursorline guibg=#00ff00
hi CursoColumn guibg=#00ff00
"""""""""""""""""""""""""""""""""
" => 代码折叠功能
"""""""""""""""""""""""""""""""""
" 激活折叠功能
set foldenable
set foldmethod=manual
" 设置折叠区域的宽度
set foldcolumn=0
" 设置折叠层数为3
setlocal foldlevel=3
" 设置为自动关闭折叠
set foldclose=all
" 用空格键来代替zo和zc快捷键实现开关折叠
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
"""""""""""""""""""""""""""""""""
" => 文字处理
"""""""""""""""""""""""""""""""""
" 使用空格来替换Tab
set expandtab
" 设置所有的Tab和缩进为4个空格
set tabstop=2
" 设定 << 和 >> 命令移动时的宽度为4
set shiftwidth=2
" 使得按退格键时可以一次删掉4个空格
set softtabstop=2
set smarttab
" 缩进，自动缩进（继承前一行的缩进）
set ai
" 智能缩进
set si
" 自动换行
set wrap
" 设置软宽度
set sw=2
"""""""""""""""""""""""""""""""""
" => Vim 界面
"""""""""""""""""""""""""""""""""
" Turn on Wild menu
set wildmenu
" 显示标尺
set ruler
" 设置命令行的高度
set cmdheight=1
" 显示行数
set nu
set lz
" 设置退格
set backspace=eol,start,indent
set whichwrap+=<,>,h,l
" 设置魔术
set magic
" 关闭错误信息响铃
set noerrorbells
" 关闭使用可视响铃代替呼叫
set novisualbell
" 显示匹配的括号
set showmatch
set mat=2
" 搜索时高亮显示搜索到的内容
set hlsearch
" 搜索时不区分大小写
set ignorecase
"""""""""""""""""""""""""""""""""
" => 编码设置
"""""""""""""""""""""""""""""""""
" 设置编码
set encoding=utf-8
" 设置文件编码
set fileencodings=utf-8
" 设置终端编码
set termencoding=utf-8
"""""""""""""""""""""""""""""""""
" => 其他设置
"""""""""""""""""""""""""""""""""
" 开启新行时使用智能自动缩进
set smartindent
set cin
set showmatch
" 隐藏工具栏
set guioptions-=T
" 隐藏菜单栏
set guioptions-=m
" 置空错误铃声的终端代码
set vb t_vb=
" 显示状态栏
set laststatus=2
" 粘贴不换行问题的解决方法
"set clipboard=unnamed
"set pastetoggle=<F9>
" 设置背景色
set background=dark
" 设置高亮相关
"highlight Search ctermbg=black ctermfg=white guifg=white guibg=black
highlight Search term=reverse term=bold ctermfg=3 ctermbg=2 gui=reverse guifg=slategrey guibg=khaki
" 在shell脚本的开头自动增加解释器及作者版本版权信息
autocmd BufNewFile *.py,*.cc,*.cpp,*.sh,*.java exec ":call SetTitle()"
func SetTitle()
  if expand("%:e") == 'sh' 
    call setline(1, "#!/bin/bash")
    call setline(2, "#########################################################")
    call setline(3, "# FileName   :".expand("%"))
    call setline(4, "# Author     :Quanbo Liu")
    call setline(5, "# Email      :quanbo.liu@enflame-tech.com")
    call setline(6, "# Time       :".strftime("%F %T"))
    call setline(7, "# Version    :V1.0")
    call setline(8, "# Description:")
    call setline(9, "#########################################################")
  endif
  if expand("%:e") == 'py'
    call setline(1, "#########################################################")
    call setline(2, "# FileName   :".expand("%"))
    call setline(3, "# Author     :Quanbo Liu")
    call setline(4, "# Email      :quanbo.liu@enflame-tech.com")
    call setline(5, "# Time       :".strftime("%F %T"))
    call setline(6, "# Version    :V1.0")
    call setline(7, "# Description:")
    call setline(8, "#########################################################")
  endif
endfunc
" 记住上次编辑位置，再次打开后自动跳转到此位置
if has("autocmd")                                                          
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif                                                        
endif
" ctags 配置
set tags=./tags,tags;

" 以下是IDE配置所需
" Vundle 配置
" 1. install Vundle
" git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
" 2. set Vundle config
set nocompatible              " required
filetype off                  " required

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'gmarik/Vundle.vim'

" 项目树
Plugin 'scrooloose/nerdtree'
" 这个插件可以显示文件的Git增删状态
Plugin 'Xuyuanp/nerdtree-git-plugin'

" F3 打开/关闭
map <F3> :NERDTreeToggle<CR>
" 当不带参数打开Vim时自动加载项目树
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" 当所有文件关闭时关闭项目树窗格
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
" 不显示这些文件
let NERDTreeIgnore=['\.pyc$', '\.swp', '\~$', 'node_modules'] "ignore files in NERDTree
" 不显示项目树上额外的信息，例如帮助、提示什么的
let NERDTreeMinimalUI=1

" 显示行号
let NERDTreeShowLineNumbers=1
let NERDTreeAutoCenter=1
" 是否显示隐藏文件
let NERDTreeShowHidden=0
" 设置宽度
let NERDTreeWinSize=30
" 在终端启动vim时，共享NERDTree
let g:nerdtree_tabs_open_on_console_startup=1
" 显示书签列表
let NERDTreeShowBookmarks=1
" 当vim打开一个目录时，nerdtree自动使用
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
" 改变nerdtree的箭头
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'

Plugin 'taglist.vim'
let Tlist_Ctags_Cmd='ctags'
let Tlist_Show_One_File=1             "不同时显示多个文件的tag，只显示当前文件的
let Tlist_Sort_Type ='name'           "按名称排序 
let Tlist_WinWidt =30                 "设置taglist的宽度             
let Tlist_Exit_OnlyWindow=1           "如果taglist窗口是最后一个窗口，则退出vim
let Tlist_Use_Right_Window=1          "在右侧窗口中显示taglist窗口
let Tlist_GainFocus_On_ToggleOpen = 1 "Taglist窗口打开时，立刻切换为有焦点状态
"let Tlist_Auto_Open=1                "打开vim时自动打开taglist
"let Tlist_Process_File_Always=1      "taglist始终解析文件中的tag，不管taglist窗口有没有打开
map <silent> <F4> :TlistToggle<cr>

" 全局搜索
Plugin 'kien/ctrlp.vim'

"let g:ctrlp_working_path_mode = 'ra'
"set wildignore+=*/tmp/*,*/node_modules/*,*.so,*.swp,*.zip     
"let g:ctrlp_custom_ignore = {'dir':  '\v[\/]\.(git|hg|svn)$', 'file': '\v\.(exe|so|dll)$'}
"let g:ctrlp_map = '<leader>p'
let g:ctrlp_map = '<F9>'
let g:ctrlp_cmd = 'CtrlP'     
map <S-f> :CtrlPMRU<CR>    "缓存优先查找   
map <S-p> :CtrlP<CR>       "当前目录含子目录查找
set wildignore+=*/tmp/*,*/node_modules/*,*.so,*.swp,*.zip     
let g:ctrlp_custom_ignore = { 
    \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
    \ }
let g:ctrlp_working_path_mode=0
let g:ctrlp_match_window_bottom=1
let g:ctrlp_max_height=15
let g:ctrlp_match_window_reversed=0
let g:ctrlp_mruf_max=500
let g:ctrlp_follow_symlinks=1
Plugin 'tacahiroy/ctrlp-funky'
nnoremap <S-U> :CtrlPFunky<Cr>
"narrow the list down with a word under cursor
nnoremap <C-h> :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
let g:ctrlp_funky_syntax_highlight = 1
let g:ctrlp_extensions = ['funky'] 


" 以下为C++开发环境准备
" 自动补全
"Plugin 'VundleVim/YouCompleteMe'
"Plugin 'ycm-core/YouCompleteMe'
" 括号/引号匹配
Plugin 'Raimondi/delimitMate'
" Formatter
" vim-autoformat
" 注释
Plugin 'preservim/nerdcommenter'

call vundle#end()            " required
filetype plugin indent on    " required
" 3. install PluginInstall in vim
" :PluginInstall
" 4. install plugin
" Add Plugin xxx in this file
" :PluginInstall

" 窗口切换配置
nnoremap <C-W> <C-W><C-W>
nnoremap <C-H> <C-W><C-H>
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>

" cscope 快捷键
"nmap <C-_>s :cs find s <C-R>=expand("<cword>")<CR><CR>
"nmap <C-_>g :cs find g <C-R>=expand("<cword>")<CR><CR>
"nmap <C-_>c :cs find c <C-R>=expand("<cword>")<CR><CR>
"nmap <C-_>t :cs find t <C-R>=expand("<cword>")<CR><CR>
"nmap <C-_>e :cs find e <C-R>=expand("<cword>")<CR><CR>
"nmap <C-_>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
"nmap <C-_>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
"nmap <C-_>d :cs find d <C-R>=expand("<cword>")<CR><CR>

nmap <A-S> :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <A-G> :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <A-C> :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <A-T> :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <A-E> :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <A-F> :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <A-I> :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <A-D> :cs find d <C-R>=expand("<cword>")<CR><CR>
